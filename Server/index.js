import express from 'express';
import mongoose from 'mongoose';
import bodyParser from 'body-parser';
import cors from 'cors';

// Import routes (gi·∫£ s·ª≠ c√°c file Routes/*.js ƒë√£ t·ªìn t·∫°i; n·∫øu ch∆∞a, t·∫°o c∆° b·∫£n nh∆∞ h∆∞·ªõng d·∫´n tr∆∞·ªõc)
import AuthRoute from './Routes/AuthRoute.js';
import UserRoute from './Routes/UserRoute.js';
import PostRoute from './Routes/PostRoute.js';
import UploadRoute from './Routes/UploadRoute.js';

// T·∫°o app
const app = express();

// Serve static files (public v√† images folder)
app.use(express.static('public'));
app.use('/images', express.static('images'));

// Middleware
app.use(bodyParser.json({ limit: "30mb", extended: true }));
app.use(bodyParser.urlencoded({ limit: "30mb", extended: true }));
app.use(cors());

// Config t·ª´ env (Docker truy·ªÅn MONGO_URI v√† PORT)
const MONGO_URI = process.env.MONGO_URI || 'mongodb://mongo:27017/mydb';
const PORT = process.env.PORT || 8080;

// K·∫øt n·ªëi MongoDB
mongoose.connect(MONGO_URI, { 
  useNewUrlParser: true, 
  useUnifiedTopology: true 
})
  .then(() => {
    console.log(`‚úÖ Connected to MongoDB at ${MONGO_URI}`);
    
    // ƒêƒÉng k√Ω routes sau khi connect (t·ªët h∆°n ƒë·ªÉ tr√°nh l·ªói n·∫øu routes c·∫ßn DB)
    app.use('/auth', AuthRoute);
    app.use('/user', UserRoute);
    app.use('/post', PostRoute);
    app.use('/upload', UploadRoute);
    
    // Root route test (optional, ƒë·ªÉ check server OK)
    app.get('/', (req, res) => {
      res.send('Social Media Backend API is running! üöÄ');
    });
    
    // Start server
    app.listen(PORT, () => {
      console.log(`üöÄ server running on port ${PORT}`);
    });
  })
  .catch((error) => {
    console.error("‚ùå MongoDB connection failed:", error.message);
    process.exit(1);
  });